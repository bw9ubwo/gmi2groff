#!/usr/bin/env python

import sys
import argparse

def initialize_document(outfile, settings):
    """Initialize the Groff document with passed settings."""
    outfile.write('\n'.join(settings) + '\n\n')

def load_settings(file_path):
    """Load settings from a specified settings file."""
    try:
        with open(file_path, 'r') as file:
            return [line.strip() for line in file if line.strip()]
    except FileNotFoundError:
        print(f"Error: Settings file '{file_path}' not found.")
        sys.exit(1)

def get_default_settings():
    """Return the default settings."""
    return [
        '.PRINTSTYLE TYPESET',
        '.PAPER A4',
        '.FAMILY P',
        '.LS 18',
        '.PT_SIZE 10',
        '.COLUMNS 1 18p',
        '.HEADING_STYLE 1 NUMBER',
        '.HEADING_STYLE 2 NUMBER',
        '.HEADING_STYLE 3 NUMBER',
        '.BLOCKQUOTE_INDENT 2m',
    ]

def write_title(outfile, title):
    """Write the document title."""
    outfile.write(f'.TL\n{title}\n')

def write_heading(outfile, level, content):
    """Write a heading of a specific level."""
    outfile.write(f'.HEADING {level} "{content}"\n.SP 1\n')

def start_list(outfile):
    outfile.write(f'.IB 2m\n.QUAD LEFT\n.LIST DIGIT\n')

def end_list(outfile):
    outfile.write(f'.LIST OFF\n.IBX CLEAR\n.SP 1\n')

def write_bullet_item(outfile, content):
    """Write a bullet list item."""
    outfile.write(f'.ITEM\n{content}\n')

def write_link(outfile, url, description):
    """Write a link, possibly with different display text."""
    if url != description:
        outfile.write(f'.ITEM\n{description}\n.BR\n\*[SIZE -2]\*[CODE]{url}\*[CODE OFF]\*[SIZE +2]\n')
    else:
        write_bullet_item(outfile, url)

def write_quote(outfile, content):
    """Write a block quote."""
    outfile.write(f'.BLOCKQUOTE\n\*[IT]{content}\*[PREV]\n.BLOCKQUOTE OFF\n')

def start_code_block(outfile):
    """Start a code block."""
    outfile.write('.SP 0\n.IL 2m\n.CODE\n\*[SIZE -2]')

def end_code_block(outfile):
    """End a code block."""
    outfile.write('\*[SIZE +2]\n.CODE OFF\n.SP 1\n.ILX CLEAR\n')

def write_paragraph(outfile, content):
    """Write a standard paragraph."""
    outfile.write(f'.LP\n.JUSTIFY\n{content}\n.SP 1\n')

def write_image(outfile, url, label):
    """Write a standard paragraph."""
    outfile.write(f'.IB 2m\n.PSPIC "{url}"\n.LP\n.QUAD CENTER\n\*[SIZE -2]{label}\*[SIZE +2]\n.IBX\n.SP 1\n')

def write_toc(outfile):
    """Write a toc."""
    outfile.write(f'.TOC\n')

def escape_leading_dot(line):
    """Escape leading dots for Groff processing."""
    return '\\&' + line if line.startswith('.') else line

def process_line(outfile, line, block):
    """Process a single line from the input file for Groff output."""
    line = line.rstrip()

    # Toggle block state at the start or end of a code block
    if line.startswith('```'):
        if block == 'code':
            block = None
            end_code_block(outfile)
        else:
            block = 'code'
            start_code_block(outfile)
        return block

    # Only process markup if not inside a code block
    if block != 'code':
        if line.startswith('# '):
            if block == 'list':
                end_list(outfile)
            write_heading(outfile, 1, line[2:].strip())
        elif line.startswith('## '):
            if block == 'list':
                end_list(outfile)
            write_heading(outfile, 2, line[3:].strip())
        elif line.startswith('### '):
            if block == 'list':
                end_list(outfile)
            write_heading(outfile, 3, line[4:].strip())
        elif line.startswith('* ') or line.startswith('- '):
            if block == None:
                start_list(outfile)
                block = 'list'
            write_bullet_item(outfile, line[2:].strip())
            return block
        elif line.startswith('=>'):
            parts = line.split(' ', 2)
            url = escape_leading_dot(parts[1].strip())
            description = parts[2].strip() if len(parts) > 2 else url
            if not block:
                if url.endswith('.eps'):
                    write_image(outfile, url.replace('\&',''), description)
                    return block
                else:
                    block = 'list'
                    start_list(outfile)
            write_link(outfile, url, description)
            return block
        elif line.startswith('> '):
            if block == 'list':
                end_list(outfile)
            write_quote(outfile, line[2:].strip())
        else:
            if block == 'list':
                end_list(outfile)
            if line.strip():
                write_paragraph(outfile, line.strip())
            return None
    else:
        # Inside a code block, write lines as they are
        if not line.strip():
            outfile.write('\n')  # Maintain empty line for spacing within code blocks
        else:
            outfile.write(f'{line}\n')
        return block

def process_file(input_file, output_file, settings_file=None, toc=None):
    """Process an input file, translating it into Groff formatted output."""
    block = None
    # Load settings and override defaults if a settings file is specified
    default_settings = get_default_settings()
    settings = load_settings(settings_file) if settings_file else default_settings

    with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
        initialize_document(outfile, settings)
        outfile.write(f'.START\n')
        for line in infile:
            block = process_line(outfile, line, block)
        if toc:
            write_toc(outfile)

def main():
    parser = argparse.ArgumentParser(description='Convert Gemini text to Groff format.')
    parser.add_argument('input_file', help='Input Gemini file')
    parser.add_argument('output_file', help='Output Groff file')
    parser.add_argument('--settings', help='Optional settings file to override defaults')
    parser.add_argument('--toc', action='store_true', help='Add a table of contents')

    args = parser.parse_args()

    process_file(args.input_file, args.output_file, args.settings, args.toc)

if __name__ == "__main__":
    main()
